tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint installs an application using Cloudify on Openstack.

imports:
  - https://cloudify.co/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-openstack-plugin
#  - plugin:cloudify-ansible-plugin
  - plugin:cloudify-utilities-plugin
#  - includes/hello-world-ansible.yaml

inputs:
  big_iq_host:
    type: string
    description: |
      The IP address of the BIG-IQ VE instance that will assign licenses to the BIG-IP VE instances
  big_iq_lic_pool:
    type: string
    description: |
      The name of the BIG-IQ key or pool that will be used to assign licenses to the BIG-IP VE instances
  use_config_drive:
    type: string
    default: true
  timezone:
    type: string
    default: UTC
    description:
      Timezone to be used by the BIGIP, if not specified default value is 'UTC'
  ntp1:
    type: string
    description: >
      Address of the NTP server 1. If not specified, the default value is used.
    default: time.google.com
  ntp2:
    type: string
    description: >
      Address of the NTP server 1. If not specified, the default value is used.
    default: 0.pool.ntp.org
  mgmt_net:
    type: string
    description: |
      The name of the pre-existing management network.
  mgmt_subnet:
    type: string
    description: |
      The name of the pre-existing management network subnet
  client_net:
    type: string
    description: |
      The name of the pre-existing client network.
  client_subnet:
    type: string
    description: |
      The name of the pre-existing client network subnet
  server_net:
    type: string
    description: |
      The name of the pre-existing server network.
  server_subnet:
    type: string
    description: |
      The name of the pre-existing server network subnet
  floating_network_id:
    type: string
    description: |
      The OpenStack ID of the network where you assigned a floating IP addresses
  mgmt_sg_name:
    type: string
    description: |
      The name of the pre-existing management security group
    default: ""
  key_name:
    type: string
    description: |
      The name of the OpenStack SSH key pair that you will import into the VE instance
  flavor:
    type: string
  image_name:
    type: string
  vs_virtualAddress:
    description: Virtual server IP address in Client VLAN
  vs_virtualPort:
    description: Virtual server port
  big_ip_as3_port:
    default: 443
  big_ip_as3_use_ssl:
    default: true
  big_ip_as3_verify_ssl:
    default: false
  mgmt_net_ip:
    type: string
  client_net_ip:
    type: string
  server_net_ip:
    type: string
  client_net_cidr:
    type: string
    description: |
      Client network subnet cidr: example "/24"
  server_net_ip:
    type: string
  server_net_cidr:
    type: string
  mtu:
    type: string
  tmm_def_gw:
    type: string
  ns1:
    type: string
  ns2:
    type: string
    
dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }
    insecure: true

node_templates:

  mgmt_port_bigip:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
      fixed_ip: {get_input: mgmt_net_ip }
    relationships:
    - type: cloudify.relationships.connected_to
      target: mgmt_net
    - type: cloudify.relationships.depends_on
      target: mgmt_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: mgmt_sg
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: ip
    

  client_port_bigip:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              allowed_address_pairs:
                - ip_address: "0.0.0.0/0"
    relationships:
    - type: cloudify.relationships.connected_to
      target: client_net
    - type: cloudify.relationships.depends_on
      target: client_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: mgmt_sg

  server_port_bigip:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              allowed_address_pairs:
                - ip_address: "0.0.0.0/0"
    relationships:
      - type: cloudify.relationships.connected_to
        target: server_net
      - type: cloudify.relationships.depends_on
        target: server_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: mgmt_sg

  mgmt_net:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: mgmt_net }
    relationships:
 
  mgmt_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: mgmt_subnet }
    relationships:
      - target: mgmt_net
        type: cloudify.relationships.contained_in
  
  mgmt_sg:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: mgmt_sg_name }
    relationships:
        
  client_net:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: client_net }
    relationships:

  client_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: client_subnet }
    relationships:
      - target: client_net
        type: cloudify.relationships.contained_in

  server_net:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: server_net }
    relationships:

  server_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: server_subnet }
    relationships:
      - target: server_net
        type: cloudify.relationships.contained_in

  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: floating_network_id }
              
  ve:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        install_method: none
    relationships:
    - type: cloudify.openstack.server_connected_to_port
      target: mgmt_port_bigip
    - type: cloudify.openstack.server_connected_to_port
      target: client_port_bigip
    - type: cloudify.openstack.server_connected_to_port
      target: server_port_bigip
    - type: cloudify.relationships.depends_on
      target: my_cloud_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              key_name: { get_input: key_name }
              config_drive: { get_input: use_config_drive }
              image_name: { get_input: image_name }
              flavor_name: { get_input: flavor }
              userdata: { get_attribute: [ my_cloud_config, cloud_config ]}
            
  my_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        chpasswd:
# You can set root and admin passwords here if you like. If not, passwords will need to 
# be configured on first login
#          list: |
#            root:f5c0nfig
#            admin:f5c0nfig
#          expire: False
        tmos_declared:
          enabled: true
          icontrollx_trusted_sources: false
          icontrollx_package_urls:
            - "file:///var/config/rest/downloads/do.rpm"
            - "file:///var/config/rest/downloads/as3.rpm"
            - "file:///var/config/rest/downloads/ts.rpm"
          do_declaration:
            schemaVersion: 1.0.0
            class: Device
            async: true
            label: Cloudinit Onboarding
            Common:
              class: Tenant
              provisioningLevels:
                class: Provision
                ltm: nominal
              poolLicense:
                class: License
                licenseType: licensePool
                bigIqHost: { get_input: big_iq_host }
                bigIqUsername: { get_secret: bigiq_username }
                bigIqPassword: { get_secret: bigiq_password}
                licensePool: { get_input: big_iq_lic_pool }
                reachable: false
                hypervisor: kvm             
              dnsServers:
                class: DNS
                nameServers:
                  - { get_input: ns1 }
                  - { get_input: ns2 }
              ntpServers:
                class: NTP
                servers:
                  - { get_input: ntp1 }
                  - { get_input: ntp2 }
              external:
                class: VLAN
                mtu: { get_input: mtu }
                interfaces:
                  - name: 1.1
                    tagged: false
              external-self:
                class: SelfIp
                address: { get_input: client_net_ip }
                vlan: external
                allowService: none
                trafficGroup: traffic-group-local-only
              internal:
                class: VLAN
                mtu: { get_input: mtu }
                interfaces:
                  - name: 1.2
                    tagged: false
              internal-self:
                class: SelfIp
                address: { get_input: server_net_ip }
                vlan: internal
                allowService: none
                trafficGroup: traffic-group-local-only
# Uncomment these lines when BIG-IP TMM has a valid default route
#              default:
#                class: Route
#                gw: { get_input: tmm_def_gw }
#                network: default
#                mtu: { get_input: mtu }
              dbvars:
                class: DbVariables
                ui.advisory.enabled: true
                ui.advisory.color: orange
          as3_declaration:
            class: ADC
            schemaVersion: 3.0.0
            label: ASM_VS1
            remark: ASM_VS1
            Tenant1:
              class: Tenant
              HTTP_Service:
                class: Application
                template: http
                serviceMain:
                  class: Service_HTTP
                  virtualAddresses:
                    - 10.101.10.151
                  snat: auto
                  pool: Pool1
                Pool1:
                  class: Pool
                  monitors:
                    - http
                  members:
                    - servicePort: 8001
                      serverAddresses:
                        - 192.168.124.160
                    - servicePort: 8002
                      serverAddresses:
                        - 192.168.124.161
          post_onboard_enabled: true
          post_onboard_commands:
            - "echo 'This has finished booting' >> /var/tmp/james.txt"
# In an Openstack environment, we set the MTU to 1450 to deal with underlay networking
            - "echo '/sbin/ifconfig eth0 mtu 1450' >> /config/startup"
# You can add tmsh commands to this post_onboard_commands section
          phone_home_url: "https://webhook.site/6a7ad207-cb2b-4479-9f1e-9a92db680c7f"
